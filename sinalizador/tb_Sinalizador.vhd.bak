library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity tb_Sinalizador is
-- Não é necessário definir portas, pois é um testbench
end tb_Sinalizador;

architecture behavior of tb_Sinalizador is

    -- Componentes do Sinalizador
    component Sinalizador is
        port (
            Clock         : in std_logic;
            Reset         : in std_logic;
            E             : in std_logic_vector(15 downto 0);
            -- Sinais de saída
            Sobe          : out std_logic;  
            Desce         : out std_logic;
            Display_7seg  : out std_logic_vector(6 downto 0)
        );
    end component;

    -- Sinais para conectar ao Sinalizador
    signal Clock_tb       : std_logic := '0';
    signal Reset_tb       : std_logic := '0';
    signal E_tb           : std_logic_vector(15 downto 0) := (others => '0');
    signal Sobe_tb        : std_logic;
    signal Desce_tb       : std_logic;
    signal Display_7seg_tb: std_logic_vector(6 downto 0);

    -- Geração do Clock (periodo de 5ns)
    constant CLK_PERIOD : time := 15 ns;

begin

    -- Instanciação do componente Sinalizador
    UUT: Sinalizador
        port map (
            Clock         => Clock_tb,
            Reset         => Reset_tb,
            E             => E_tb,
            Sobe          => Sobe_tb,
            Desce         => Desce_tb,
            Display_7seg  => Display_7seg_tb
        );

    -- Geração do clock
    Clock_process : process
    begin
        Clock_tb <= '0';
        wait for CLK_PERIOD / 2;
        Clock_tb <= '1';
        wait for CLK_PERIOD / 2;
    end process;

    -- Processo de estímulos
    Stimulus_process: process
    begin
        -- Inicialização
        Reset_tb <= '1';  -- Ativando reset
        wait for 30 ns;    -- Espera 1 ciclo de clock
        Reset_tb <= '0';  -- Desativando reset
        
        -- Testando diferentes valores de E com variação rápida
        -- Fazendo as mudanças de E mais rápidas para observar a frequência dos sinais Sobe/Desce

        -- Variação rápida de E (mudando a cada 10 ns)
        E_tb <= "0000000000001000";  -- Teste com o primeiro valor
        wait for 17 ns;

        E_tb <= "0000000000010000";  -- Teste com o segundo valor
        wait for 18 ns;

        E_tb <= "0000000000001000";  -- Teste com o terceiro valor
        wait for 10 ns;

        E_tb <= "0000000000001000";  -- Teste com o quarto valor
        wait for 10 ns;

        E_tb <= "0000000000000001";  -- Teste com o quinto valor
        wait for 10 ns;

        E_tb <= "0000000000000010";  -- Teste com o sexto valor
        wait for 10 ns;

        E_tb <= "0000000000001000";  -- Teste com o sétimo valor
        wait for 10 ns;

        -- Fazendo os valores de E alterarem rapidamente de novo
        E_tb <= "0000000000001000";  -- Teste com o oitavo valor
        wait for 10 ns;

        E_tb <= "0000000000000001";  -- Teste com o nono valor
        wait for 10 ns;

        E_tb <= "0000000000000001";  -- Teste com o décimo valor
        wait for 10 ns;

        E_tb <= "0000001000000000";  -- Teste com o décimo primeiro valor
        wait for 10 ns;

        -- Testando variações rápidas
        E_tb <= "0000100000000000";  -- Teste com o décimo segundo valor
        wait for 10 ns;

        E_tb <= "0001000000000000";  -- Teste com o décimo terceiro valor
        wait for 10 ns;

        E_tb <= "0010000000000000";  -- Teste com o décimo quarto valor
        wait for 10 ns;

        E_tb <= "0100000000000000";  -- Teste com o décimo quinto valor
        wait for 10 ns;

        E_tb <= "1000000000000000";  -- Teste com o décimo sexto valor
        wait for 10 ns;

        -- Finalizando a simulação
        wait;
    end process;

end behavior;
